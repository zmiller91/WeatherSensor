Version 4.0 HI-TECH Software Intermediate Code
"413 bme280.c
[; ;bme280.c: 413: int8_t bme280_init(struct bme280_dev *dev)
[c E39 0 1 .. ]
[n E39 bme280_intf BME280_SPI_INTF BME280_I2C_INTF  ]
[v F98 `(c ~T0 @X0 0 tf4`uc`*uc`ul`*v ]
[v F104 `(c ~T0 @X0 0 tf4`uc`*Cuc`ul`*v ]
[v F110 `(v ~T0 @X0 0 tf2`ul`*v ]
"323 ./bme280_defs.h
[; ;./bme280_defs.h: 323: {
[s S1 `us 1 `s 1 `s 1 `us 1 `s 1 `s 1 `s 1 `s 1 `s 1 `s 1 `s 1 `s 1 `uc 1 `s 1 `uc 1 `s 1 `s 1 `c 1 `l 1 ]
[n S1 bme280_calib_data dig_t1 dig_t2 dig_t3 dig_p1 dig_p2 dig_p3 dig_p4 dig_p5 dig_p6 dig_p7 dig_p8 dig_p9 dig_h1 dig_h2 dig_h3 dig_h4 dig_h5 dig_h6 t_fine ]
"454
[; ;./bme280_defs.h: 454: {
[s S5 `uc 1 `E39 1 `*v 1 `c 1 `*F98 1 `*F104 1 `*F110 1 `S1 1 ]
[n S5 bme280_dev chip_id intf intf_ptr intf_rslt read write delay_us calib_data ]
"128 ./bme280.h
[; ;./bme280.h: 128: int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme280_dev *dev);
[v _bme280_get_regs `(c ~T0 @X0 0 ef4`uc`*uc`ul`*S5 ]
"281
[; ;./bme280.h: 281: int8_t bme280_soft_reset(struct bme280_dev *dev);
[v _bme280_soft_reset `(c ~T0 @X0 0 ef1`*S5 ]
"122 bme280.c
[; ;bme280.c: 122: static int8_t get_calib_data(struct bme280_dev *dev);
[v _get_calib_data `(c ~T0 @X0 0 sf1`*S5 ]
"93
[; ;bme280.c: 93: static int8_t null_ptr_check(const struct bme280_dev *dev);
[v _null_ptr_check `(c ~T0 @X0 0 sf1`*CS5 ]
"107
[; ;bme280.c: 107: static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len);
[v _interleave_reg_addr `(v ~T0 @X0 0 sf4`*Cuc`*uc`*Cuc`ul ]
"433 ./bme280_defs.h
[; ;./bme280_defs.h: 433: {
[s S4 `uc 1 `uc 1 `uc 1 `uc 1 `uc 1 ]
[n S4 bme280_settings osr_p osr_t osr_h filter standby_time ]
"256 ./bme280.h
[; ;./bme280.h: 256: int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev);
[v _bme280_get_sensor_mode `(c ~T0 @X0 0 ef2`*uc`*S5 ]
"63 bme280.c
[; ;bme280.c: 63: static int8_t put_device_to_sleep(struct bme280_dev *dev);
[v _put_device_to_sleep `(c ~T0 @X0 0 sf1`*S5 ]
"158
[; ;bme280.c: 158: static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings);
[v _are_settings_changed `(uc ~T0 @X0 0 sf2`uc`uc ]
"193
[; ;bme280.c: 193: static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
[v _set_osr_settings `(c ~T0 @X0 0 sf3`uc`*CS4`*S5 ]
"257
[; ;bme280.c: 257: static int8_t set_filter_standby_settings(uint8_t desired_settings,
[v _set_filter_standby_settings `(c ~T0 @X0 0 sf3`uc`*CS4`*S5 ]
"295
[; ;bme280.c: 295: static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings);
[v _parse_device_settings `(v ~T0 @X0 0 sf2`*Cuc`*S4 ]
"78
[; ;bme280.c: 78: static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev);
[v _write_power_mode `(c ~T0 @X0 0 sf2`uc`*S5 ]
"388 ./bme280_defs.h
[; ;./bme280_defs.h: 388: {
[s S2 `d 1 `d 1 `d 1 ]
[n S2 bme280_data pressure temperature humidity ]
"417
[; ;./bme280_defs.h: 417: {
[s S3 `ul 1 `ul 1 `ul 1 ]
[n S3 bme280_uncomp_data pressure temperature humidity ]
"304 bme280.c
[; ;bme280.c: 304: static void parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data);
[v _parse_sensor_data `(v ~T0 @X0 0 sf2`*Cuc`*S3 ]
"320 ./bme280.h
[; ;./bme280.h: 320: int8_t bme280_compensate_data(uint8_t sensor_comp,
[v _bme280_compensate_data `(c ~T0 @X0 0 ef4`uc`*CS3`*S2`*S1 ]
"361 bme280.c
[; ;bme280.c: 361: static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
[v _compensate_temperature `(d ~T0 @X0 0 sf2`*CS3`*S1 ]
"335
[; ;bme280.c: 335: static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
[v _compensate_pressure `(d ~T0 @X0 0 sf2`*CS3`*CS1 ]
"348
[; ;bme280.c: 348: static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
[v _compensate_humidity `(d ~T0 @X0 0 sf2`*CS3`*CS1 ]
"174
[; ;bme280.c: 174: static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev);
[v _set_osr_humidity_settings `(c ~T0 @X0 0 sf2`*CS4`*S5 ]
"213
[; ;bme280.c: 213: static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
[v _set_osr_press_temp_settings `(c ~T0 @X0 0 sf3`uc`*CS4`*S5 ]
"227
[; ;bme280.c: 227: static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings);
[v _fill_osr_press_settings `(v ~T0 @X0 0 sf2`*uc`*CS4 ]
"239
[; ;bme280.c: 239: static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings);
[v _fill_osr_temp_settings `(v ~T0 @X0 0 sf2`*uc`*CS4 ]
"271
[; ;bme280.c: 271: static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings);
[v _fill_filter_settings `(v ~T0 @X0 0 sf2`*uc`*CS4 ]
"283
[; ;bme280.c: 283: static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings);
[v _fill_standby_settings `(v ~T0 @X0 0 sf2`*uc`*CS4 ]
"321
[; ;bme280.c: 321: static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev);
[v _reload_device_settings `(c ~T0 @X0 0 sf2`*CS4`*S5 ]
"132
[; ;bme280.c: 132: static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev);
[v _parse_temp_press_calib_data `(v ~T0 @X0 0 sf2`*Cuc`*S5 ]
"142
[; ;bme280.c: 142: static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev);
[v _parse_humidity_calib_data `(v ~T0 @X0 0 sf2`*Cuc`*S5 ]
[v F432 `(c ~T0 @X0 0 tf4`uc`*uc`ul`*v ]
[v F443 `(c ~T0 @X0 0 tf4`uc`*Cuc`ul`*v ]
[v F452 `(v ~T0 @X0 0 tf2`ul`*v ]
"413 bme280.c
[; ;bme280.c: 413: int8_t bme280_init(struct bme280_dev *dev)
[v _bme280_init `(c ~T0 @X0 1 ef1`*S5 ]
"414
[; ;bme280.c: 414: {
{
[e :U _bme280_init ]
"413
[; ;bme280.c: 413: int8_t bme280_init(struct bme280_dev *dev)
[v _dev `*S5 ~T0 @X0 1 r1 ]
"414
[; ;bme280.c: 414: {
[f ]
"415
[; ;bme280.c: 415:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"416
[; ;bme280.c: 416:     uint8_t chip_id = 0;
[v _chip_id `uc ~T0 @X0 1 a ]
[e = _chip_id -> -> 0 `i `uc ]
"419
[; ;bme280.c: 419:     rslt = bme280_get_regs(0xD0, &chip_id, 1, dev);
[e = _rslt ( _bme280_get_regs (4 , , , -> -> 208 `i `uc &U _chip_id -> -> -> 1 `i `l `ul _dev ]
"422
[; ;bme280.c: 422:     if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 7  ]
"423
[; ;bme280.c: 423:     {
{
"424
[; ;bme280.c: 424:         if (chip_id == 0x60)
[e $ ! == -> _chip_id `i -> 96 `i 8  ]
"425
[; ;bme280.c: 425:         {
{
"426
[; ;bme280.c: 426:             dev->chip_id = chip_id;
[e = . *U _dev 0 _chip_id ]
"429
[; ;bme280.c: 429:             rslt = bme280_soft_reset(dev);
[e = _rslt ( _bme280_soft_reset (1 _dev ]
"431
[; ;bme280.c: 431:             if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 9  ]
"432
[; ;bme280.c: 432:             {
{
"434
[; ;bme280.c: 434:                 rslt = get_calib_data(dev);
[e = _rslt ( _get_calib_data (1 _dev ]
"435
[; ;bme280.c: 435:             }
}
[e :U 9 ]
"436
[; ;bme280.c: 436:         }
}
[e $U 10  ]
"437
[; ;bme280.c: 437:         else
[e :U 8 ]
"438
[; ;bme280.c: 438:         {
{
"439
[; ;bme280.c: 439:             rslt = -4;
[e = _rslt -> -U -> 4 `i `c ]
"440
[; ;bme280.c: 440:         }
}
[e :U 10 ]
"441
[; ;bme280.c: 441:     }
}
[e :U 7 ]
"443
[; ;bme280.c: 443:     return rslt;
[e ) _rslt ]
[e $UE 6  ]
"444
[; ;bme280.c: 444: }
[e :UE 6 ]
}
"449
[; ;bme280.c: 449: int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
[v _bme280_get_regs `(c ~T0 @X0 1 ef4`uc`*uc`ul`*S5 ]
"450
[; ;bme280.c: 450: {
{
[e :U _bme280_get_regs ]
"449
[; ;bme280.c: 449: int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
[v _reg_addr `uc ~T0 @X0 1 r1 ]
[v _reg_data `*uc ~T0 @X0 1 r2 ]
[v _len `ul ~T0 @X0 1 r3 ]
[v _dev `*S5 ~T0 @X0 1 r4 ]
"450
[; ;bme280.c: 450: {
[f ]
"451
[; ;bme280.c: 451:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"454
[; ;bme280.c: 454:     rslt = null_ptr_check(dev);
[e = _rslt ( _null_ptr_check (1 -> _dev `*CS5 ]
"456
[; ;bme280.c: 456:     if ((rslt == 0) && (reg_data != ((void*)0)))
[e $ ! && == -> _rslt `i -> 0 `i != _reg_data -> -> -> 0 `i `*v `*uc 12  ]
"457
[; ;bme280.c: 457:     {
{
"459
[; ;bme280.c: 459:         if (dev->intf != BME280_I2C_INTF)
[e $ ! != -> . *U _dev 1 `ui -> . `E39 1 `ui 13  ]
"460
[; ;bme280.c: 460:         {
{
"461
[; ;bme280.c: 461:             reg_addr = reg_addr | 0x80;
[e = _reg_addr -> | -> _reg_addr `i -> 128 `i `uc ]
"462
[; ;bme280.c: 462:         }
}
[e :U 13 ]
"465
[; ;bme280.c: 465:         dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
[e = . *U _dev 3 ( *U . *U _dev 4 (4 , , , _reg_addr _reg_data _len . *U _dev 2 ]
"468
[; ;bme280.c: 468:         if (dev->intf_rslt != 0)
[e $ ! != -> . *U _dev 3 `i -> 0 `i 14  ]
"469
[; ;bme280.c: 469:         {
{
"470
[; ;bme280.c: 470:             rslt = -2;
[e = _rslt -> -U -> 2 `i `c ]
"471
[; ;bme280.c: 471:         }
}
[e :U 14 ]
"472
[; ;bme280.c: 472:     }
}
[e $U 15  ]
"473
[; ;bme280.c: 473:     else
[e :U 12 ]
"474
[; ;bme280.c: 474:     {
{
"475
[; ;bme280.c: 475:         rslt = -1;
[e = _rslt -> -U -> 1 `i `c ]
"476
[; ;bme280.c: 476:     }
}
[e :U 15 ]
"478
[; ;bme280.c: 478:     return rslt;
[e ) _rslt ]
[e $UE 11  ]
"479
[; ;bme280.c: 479: }
[e :UE 11 ]
}
"485
[; ;bme280.c: 485: int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
[v _bme280_set_regs `(c ~T0 @X0 1 ef4`*uc`*Cuc`ul`*S5 ]
"486
[; ;bme280.c: 486: {
{
[e :U _bme280_set_regs ]
"485
[; ;bme280.c: 485: int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme280_dev *dev)
[v _reg_addr `*uc ~T0 @X0 1 r1 ]
[v _reg_data `*Cuc ~T0 @X0 1 r2 ]
[v _len `ul ~T0 @X0 1 r3 ]
[v _dev `*S5 ~T0 @X0 1 r4 ]
"486
[; ;bme280.c: 486: {
[f ]
"487
[; ;bme280.c: 487:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"488
[; ;bme280.c: 488:     uint8_t temp_buff[20];
[v _temp_buff `uc ~T0 @X0 -> 20 `i a ]
"489
[; ;bme280.c: 489:     uint32_t temp_len;
[v _temp_len `ul ~T0 @X0 1 a ]
"490
[; ;bme280.c: 490:     uint32_t reg_addr_cnt;
[v _reg_addr_cnt `ul ~T0 @X0 1 a ]
"492
[; ;bme280.c: 492:     if (len > 10)
[e $ ! > _len -> -> -> 10 `i `l `ul 17  ]
"493
[; ;bme280.c: 493:     {
{
"494
[; ;bme280.c: 494:         len = 10;
[e = _len -> -> -> 10 `i `l `ul ]
"495
[; ;bme280.c: 495:     }
}
[e :U 17 ]
"498
[; ;bme280.c: 498:     rslt = null_ptr_check(dev);
[e = _rslt ( _null_ptr_check (1 -> _dev `*CS5 ]
"501
[; ;bme280.c: 501:     if ((rslt == 0) && (reg_addr != ((void*)0)) && (reg_data != ((void*)0)))
[e $ ! && && == -> _rslt `i -> 0 `i != _reg_addr -> -> -> 0 `i `*v `*uc != _reg_data -> -> -> 0 `i `*v `*Cuc 18  ]
"502
[; ;bme280.c: 502:     {
{
"503
[; ;bme280.c: 503:         if (len != 0)
[e $ ! != _len -> -> -> 0 `i `l `ul 19  ]
"504
[; ;bme280.c: 504:         {
{
"505
[; ;bme280.c: 505:             temp_buff[0] = reg_data[0];
[e = *U + &U _temp_buff * -> -> -> 0 `i `ui `ux -> -> # *U &U _temp_buff `ui `ux *U + _reg_data * -> -> 0 `i `x -> -> # *U _reg_data `i `x ]
"508
[; ;bme280.c: 508:             if (dev->intf != BME280_I2C_INTF)
[e $ ! != -> . *U _dev 1 `ui -> . `E39 1 `ui 20  ]
"509
[; ;bme280.c: 509:             {
{
"510
[; ;bme280.c: 510:                 for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
{
[e = _reg_addr_cnt -> -> -> 0 `i `l `ul ]
[e $U 24  ]
[e :U 21 ]
"511
[; ;bme280.c: 511:                 {
{
"512
[; ;bme280.c: 512:                     reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
[e = *U + _reg_addr * -> _reg_addr_cnt `ux -> -> # *U _reg_addr `ui `ux -> & -> *U + _reg_addr * -> _reg_addr_cnt `ux -> -> # *U _reg_addr `ui `ux `i -> 127 `i `uc ]
"513
[; ;bme280.c: 513:                 }
}
[e ++ _reg_addr_cnt -> -> -> 1 `i `l `ul ]
[e :U 24 ]
[e $ < _reg_addr_cnt _len 21  ]
[e :U 22 ]
}
"514
[; ;bme280.c: 514:             }
}
[e :U 20 ]
"517
[; ;bme280.c: 517:             if (len > 1)
[e $ ! > _len -> -> -> 1 `i `l `ul 25  ]
"518
[; ;bme280.c: 518:             {
{
"522
[; ;bme280.c: 522:                 interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
[e ( _interleave_reg_addr (4 , , , -> _reg_addr `*Cuc &U _temp_buff _reg_data _len ]
"523
[; ;bme280.c: 523:                 temp_len = ((len * 2) - 1);
[e = _temp_len - * _len -> -> -> 2 `i `l `ul -> -> -> 1 `i `l `ul ]
"524
[; ;bme280.c: 524:             }
}
[e $U 26  ]
"525
[; ;bme280.c: 525:             else
[e :U 25 ]
"526
[; ;bme280.c: 526:             {
{
"527
[; ;bme280.c: 527:                 temp_len = len;
[e = _temp_len _len ]
"528
[; ;bme280.c: 528:             }
}
[e :U 26 ]
"530
[; ;bme280.c: 530:             dev->intf_rslt = dev->write(reg_addr[0], temp_buff, temp_len, dev->intf_ptr);
[e = . *U _dev 3 ( *U . *U _dev 5 (4 , , , *U + _reg_addr * -> -> 0 `i `x -> -> # *U _reg_addr `i `x -> &U _temp_buff `*Cuc _temp_len . *U _dev 2 ]
"533
[; ;bme280.c: 533:             if (dev->intf_rslt != 0)
[e $ ! != -> . *U _dev 3 `i -> 0 `i 27  ]
"534
[; ;bme280.c: 534:             {
{
"535
[; ;bme280.c: 535:                 rslt = -2;
[e = _rslt -> -U -> 2 `i `c ]
"536
[; ;bme280.c: 536:             }
}
[e :U 27 ]
"537
[; ;bme280.c: 537:         }
}
[e $U 28  ]
"538
[; ;bme280.c: 538:         else
[e :U 19 ]
"539
[; ;bme280.c: 539:         {
{
"540
[; ;bme280.c: 540:             rslt = -3;
[e = _rslt -> -U -> 3 `i `c ]
"541
[; ;bme280.c: 541:         }
}
[e :U 28 ]
"542
[; ;bme280.c: 542:     }
}
[e $U 29  ]
"543
[; ;bme280.c: 543:     else
[e :U 18 ]
"544
[; ;bme280.c: 544:     {
{
"545
[; ;bme280.c: 545:         rslt = -1;
[e = _rslt -> -U -> 1 `i `c ]
"546
[; ;bme280.c: 546:     }
}
[e :U 29 ]
"548
[; ;bme280.c: 548:     return rslt;
[e ) _rslt ]
[e $UE 16  ]
"549
[; ;bme280.c: 549: }
[e :UE 16 ]
}
"555
[; ;bme280.c: 555: int8_t bme280_set_sensor_settings(uint8_t desired_settings,
[v _bme280_set_sensor_settings `(c ~T0 @X0 1 ef3`uc`*CS4`*S5 ]
"558
[; ;bme280.c: 558: {
{
[e :U _bme280_set_sensor_settings ]
"555
[; ;bme280.c: 555: int8_t bme280_set_sensor_settings(uint8_t desired_settings,
[v _desired_settings `uc ~T0 @X0 1 r1 ]
"556
[; ;bme280.c: 556:                                   const struct bme280_settings *settings,
[v _settings `*CS4 ~T0 @X0 1 r2 ]
"557
[; ;bme280.c: 557:                                   struct bme280_dev *dev)
[v _dev `*S5 ~T0 @X0 1 r3 ]
"558
[; ;bme280.c: 558: {
[f ]
"559
[; ;bme280.c: 559:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"560
[; ;bme280.c: 560:     uint8_t sensor_mode;
[v _sensor_mode `uc ~T0 @X0 1 a ]
"562
[; ;bme280.c: 562:     if (settings != ((void*)0))
[e $ ! != _settings -> -> -> 0 `i `*v `*CS4 31  ]
"563
[; ;bme280.c: 563:     {
{
"564
[; ;bme280.c: 564:         rslt = bme280_get_sensor_mode(&sensor_mode, dev);
[e = _rslt ( _bme280_get_sensor_mode (2 , &U _sensor_mode _dev ]
"566
[; ;bme280.c: 566:         if ((rslt == 0) && (sensor_mode != 0x00))
[e $ ! && == -> _rslt `i -> 0 `i != -> _sensor_mode `i -> 0 `i 32  ]
"567
[; ;bme280.c: 567:         {
{
"568
[; ;bme280.c: 568:             rslt = put_device_to_sleep(dev);
[e = _rslt ( _put_device_to_sleep (1 _dev ]
"569
[; ;bme280.c: 569:         }
}
[e :U 32 ]
"571
[; ;bme280.c: 571:         if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 33  ]
"572
[; ;bme280.c: 572:         {
{
"576
[; ;bme280.c: 576:             if (are_settings_changed(0x07, desired_settings))
[e $ ! != -> ( _are_settings_changed (2 , -> -> 7 `i `uc _desired_settings `i -> 0 `i 34  ]
"577
[; ;bme280.c: 577:             {
{
"578
[; ;bme280.c: 578:                 rslt = set_osr_settings(desired_settings, settings, dev);
[e = _rslt ( _set_osr_settings (3 , , _desired_settings _settings _dev ]
"579
[; ;bme280.c: 579:             }
}
[e :U 34 ]
"584
[; ;bme280.c: 584:             if ((rslt == 0) && are_settings_changed(0x18, desired_settings))
[e $ ! && == -> _rslt `i -> 0 `i != -> ( _are_settings_changed (2 , -> -> 24 `i `uc _desired_settings `i -> 0 `i 35  ]
"585
[; ;bme280.c: 585:             {
{
"586
[; ;bme280.c: 586:                 rslt = set_filter_standby_settings(desired_settings, settings, dev);
[e = _rslt ( _set_filter_standby_settings (3 , , _desired_settings _settings _dev ]
"587
[; ;bme280.c: 587:             }
}
[e :U 35 ]
"588
[; ;bme280.c: 588:         }
}
[e :U 33 ]
"589
[; ;bme280.c: 589:     }
}
[e $U 36  ]
"590
[; ;bme280.c: 590:     else
[e :U 31 ]
"591
[; ;bme280.c: 591:     {
{
"592
[; ;bme280.c: 592:         rslt = -1;
[e = _rslt -> -U -> 1 `i `c ]
"593
[; ;bme280.c: 593:     }
}
[e :U 36 ]
"595
[; ;bme280.c: 595:     return rslt;
[e ) _rslt ]
[e $UE 30  ]
"596
[; ;bme280.c: 596: }
[e :UE 30 ]
}
"602
[; ;bme280.c: 602: int8_t bme280_get_sensor_settings(struct bme280_settings *settings, struct bme280_dev *dev)
[v _bme280_get_sensor_settings `(c ~T0 @X0 1 ef2`*S4`*S5 ]
"603
[; ;bme280.c: 603: {
{
[e :U _bme280_get_sensor_settings ]
"602
[; ;bme280.c: 602: int8_t bme280_get_sensor_settings(struct bme280_settings *settings, struct bme280_dev *dev)
[v _settings `*S4 ~T0 @X0 1 r1 ]
[v _dev `*S5 ~T0 @X0 1 r2 ]
"603
[; ;bme280.c: 603: {
[f ]
"604
[; ;bme280.c: 604:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"605
[; ;bme280.c: 605:     uint8_t reg_data[4];
[v _reg_data `uc ~T0 @X0 -> 4 `i a ]
"607
[; ;bme280.c: 607:     if (settings != ((void*)0))
[e $ ! != _settings -> -> -> 0 `i `*v `*S4 38  ]
"608
[; ;bme280.c: 608:     {
{
"609
[; ;bme280.c: 609:         rslt = bme280_get_regs(0xF2, reg_data, 4, dev);
[e = _rslt ( _bme280_get_regs (4 , , , -> -> 242 `i `uc &U _reg_data -> -> -> 4 `i `l `ul _dev ]
"611
[; ;bme280.c: 611:         if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 39  ]
"612
[; ;bme280.c: 612:         {
{
"613
[; ;bme280.c: 613:             parse_device_settings(reg_data, settings);
[e ( _parse_device_settings (2 , -> &U _reg_data `*Cuc _settings ]
"614
[; ;bme280.c: 614:         }
}
[e :U 39 ]
"615
[; ;bme280.c: 615:     }
}
[e $U 40  ]
"616
[; ;bme280.c: 616:     else
[e :U 38 ]
"617
[; ;bme280.c: 617:     {
{
"618
[; ;bme280.c: 618:         rslt = -1;
[e = _rslt -> -U -> 1 `i `c ]
"619
[; ;bme280.c: 619:     }
}
[e :U 40 ]
"621
[; ;bme280.c: 621:     return rslt;
[e ) _rslt ]
[e $UE 37  ]
"622
[; ;bme280.c: 622: }
[e :UE 37 ]
}
"627
[; ;bme280.c: 627: int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
[v _bme280_set_sensor_mode `(c ~T0 @X0 1 ef2`uc`*S5 ]
"628
[; ;bme280.c: 628: {
{
[e :U _bme280_set_sensor_mode ]
"627
[; ;bme280.c: 627: int8_t bme280_set_sensor_mode(uint8_t sensor_mode, struct bme280_dev *dev)
[v _sensor_mode `uc ~T0 @X0 1 r1 ]
[v _dev `*S5 ~T0 @X0 1 r2 ]
"628
[; ;bme280.c: 628: {
[f ]
"629
[; ;bme280.c: 629:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"630
[; ;bme280.c: 630:     uint8_t last_set_mode;
[v _last_set_mode `uc ~T0 @X0 1 a ]
"632
[; ;bme280.c: 632:     rslt = bme280_get_sensor_mode(&last_set_mode, dev);
[e = _rslt ( _bme280_get_sensor_mode (2 , &U _last_set_mode _dev ]
"637
[; ;bme280.c: 637:     if ((rslt == 0) && (last_set_mode != 0x00))
[e $ ! && == -> _rslt `i -> 0 `i != -> _last_set_mode `i -> 0 `i 42  ]
"638
[; ;bme280.c: 638:     {
{
"639
[; ;bme280.c: 639:         rslt = put_device_to_sleep(dev);
[e = _rslt ( _put_device_to_sleep (1 _dev ]
"640
[; ;bme280.c: 640:     }
}
[e :U 42 ]
"643
[; ;bme280.c: 643:     if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 43  ]
"644
[; ;bme280.c: 644:     {
{
"645
[; ;bme280.c: 645:         rslt = write_power_mode(sensor_mode, dev);
[e = _rslt ( _write_power_mode (2 , _sensor_mode _dev ]
"646
[; ;bme280.c: 646:     }
}
[e :U 43 ]
"648
[; ;bme280.c: 648:     return rslt;
[e ) _rslt ]
[e $UE 41  ]
"649
[; ;bme280.c: 649: }
[e :UE 41 ]
}
"654
[; ;bme280.c: 654: int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
[v _bme280_get_sensor_mode `(c ~T0 @X0 1 ef2`*uc`*S5 ]
"655
[; ;bme280.c: 655: {
{
[e :U _bme280_get_sensor_mode ]
"654
[; ;bme280.c: 654: int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, struct bme280_dev *dev)
[v _sensor_mode `*uc ~T0 @X0 1 r1 ]
[v _dev `*S5 ~T0 @X0 1 r2 ]
"655
[; ;bme280.c: 655: {
[f ]
"656
[; ;bme280.c: 656:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"658
[; ;bme280.c: 658:     if (sensor_mode != ((void*)0))
[e $ ! != _sensor_mode -> -> -> 0 `i `*v `*uc 45  ]
"659
[; ;bme280.c: 659:     {
{
"661
[; ;bme280.c: 661:         rslt = bme280_get_regs(0xF4, sensor_mode, 1, dev);
[e = _rslt ( _bme280_get_regs (4 , , , -> -> 244 `i `uc _sensor_mode -> -> -> 1 `i `l `ul _dev ]
"664
[; ;bme280.c: 664:         *sensor_mode = (*sensor_mode & ( 0x03));
[e = *U _sensor_mode -> & -> *U _sensor_mode `i -> 3 `i `uc ]
"665
[; ;bme280.c: 665:     }
}
[e $U 46  ]
"666
[; ;bme280.c: 666:     else
[e :U 45 ]
"667
[; ;bme280.c: 667:     {
{
"668
[; ;bme280.c: 668:         rslt = -1;
[e = _rslt -> -U -> 1 `i `c ]
"669
[; ;bme280.c: 669:     }
}
[e :U 46 ]
"671
[; ;bme280.c: 671:     return rslt;
[e ) _rslt ]
[e $UE 44  ]
"672
[; ;bme280.c: 672: }
[e :UE 44 ]
}
"677
[; ;bme280.c: 677: int8_t bme280_soft_reset(struct bme280_dev *dev)
[v _bme280_soft_reset `(c ~T0 @X0 1 ef1`*S5 ]
"678
[; ;bme280.c: 678: {
{
[e :U _bme280_soft_reset ]
"677
[; ;bme280.c: 677: int8_t bme280_soft_reset(struct bme280_dev *dev)
[v _dev `*S5 ~T0 @X0 1 r1 ]
"678
[; ;bme280.c: 678: {
[f ]
"679
[; ;bme280.c: 679:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"680
[; ;bme280.c: 680:     uint8_t reg_addr = 0xE0;
[v _reg_addr `uc ~T0 @X0 1 a ]
[e = _reg_addr -> -> 224 `i `uc ]
"681
[; ;bme280.c: 681:     uint8_t status_reg = 0;
[v _status_reg `uc ~T0 @X0 1 a ]
[e = _status_reg -> -> 0 `i `uc ]
"682
[; ;bme280.c: 682:     uint8_t try_run = 5;
[v _try_run `uc ~T0 @X0 1 a ]
[e = _try_run -> -> 5 `i `uc ]
"685
[; ;bme280.c: 685:     uint8_t soft_rst_cmd = 0xB6;
[v _soft_rst_cmd `uc ~T0 @X0 1 a ]
[e = _soft_rst_cmd -> -> 182 `i `uc ]
"688
[; ;bme280.c: 688:     rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
[e = _rslt ( _bme280_set_regs (4 , , , &U _reg_addr -> &U _soft_rst_cmd `*Cuc -> -> -> 1 `i `l `ul _dev ]
"690
[; ;bme280.c: 690:     if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 48  ]
"691
[; ;bme280.c: 691:     {
{
"693
[; ;bme280.c: 693:         do
[e :U 51 ]
"694
[; ;bme280.c: 694:         {
{
"696
[; ;bme280.c: 696:             dev->delay_us(2000, dev->intf_ptr);
[e ( *U . *U _dev 6 (2 , -> -> -> 2000 `i `l `ul . *U _dev 2 ]
"697
[; ;bme280.c: 697:             rslt = bme280_get_regs(0xF3, &status_reg, 1, dev);
[e = _rslt ( _bme280_get_regs (4 , , , -> -> 243 `i `uc &U _status_reg -> -> -> 1 `i `l `ul _dev ]
"699
[; ;bme280.c: 699:         } while ((rslt == 0) && (try_run--) && (status_reg & 0x01));
}
[e $ && && == -> _rslt `i -> 0 `i != -> -- _try_run -> -> 1 `i `uc `i -> 0 `i != & -> _status_reg `i -> 1 `i -> 0 `i 51  ]
[e :U 50 ]
"701
[; ;bme280.c: 701:         if (status_reg & 0x01)
[e $ ! != & -> _status_reg `i -> 1 `i -> 0 `i 52  ]
"702
[; ;bme280.c: 702:         {
{
"703
[; ;bme280.c: 703:             rslt = -6;
[e = _rslt -> -U -> 6 `i `c ]
"704
[; ;bme280.c: 704:         }
}
[e :U 52 ]
"705
[; ;bme280.c: 705:     }
}
[e :U 48 ]
"707
[; ;bme280.c: 707:     return rslt;
[e ) _rslt ]
[e $UE 47  ]
"708
[; ;bme280.c: 708: }
[e :UE 47 ]
}
"715
[; ;bme280.c: 715: int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
[v _bme280_get_sensor_data `(c ~T0 @X0 1 ef3`uc`*S2`*S5 ]
"716
[; ;bme280.c: 716: {
{
[e :U _bme280_get_sensor_data ]
"715
[; ;bme280.c: 715: int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
[v _sensor_comp `uc ~T0 @X0 1 r1 ]
[v _comp_data `*S2 ~T0 @X0 1 r2 ]
[v _dev `*S5 ~T0 @X0 1 r3 ]
"716
[; ;bme280.c: 716: {
[f ]
"717
[; ;bme280.c: 717:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
[v F285 `uc ~T0 @X0 -> 8 `i s ]
[i F285
:U ..
"722
[; ;bme280.c: 722:     uint8_t reg_data[8] = { 0 };
-> -> 0 `i `uc
..
]
[v _reg_data `uc ~T0 @X0 -> 8 `i a ]
[e = _reg_data F285 ]
[v F287 `S3 ~T0 @X0 1 s ]
[i F287
:U ..
:U ..
"723
[; ;bme280.c: 723:     struct bme280_uncomp_data uncomp_data = { 0 };
-> -> -> 0 `i `l `ul
..
..
]
[v _uncomp_data `S3 ~T0 @X0 1 a ]
[e = _uncomp_data F287 ]
"725
[; ;bme280.c: 725:     if (comp_data != ((void*)0))
[e $ ! != _comp_data -> -> -> 0 `i `*v `*S2 54  ]
"726
[; ;bme280.c: 726:     {
{
"728
[; ;bme280.c: 728:         rslt = bme280_get_regs(0xF7, reg_data, 8, dev);
[e = _rslt ( _bme280_get_regs (4 , , , -> -> 247 `i `uc &U _reg_data -> -> -> 8 `i `l `ul _dev ]
"730
[; ;bme280.c: 730:         if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 55  ]
"731
[; ;bme280.c: 731:         {
{
"733
[; ;bme280.c: 733:             parse_sensor_data(reg_data, &uncomp_data);
[e ( _parse_sensor_data (2 , -> &U _reg_data `*Cuc &U _uncomp_data ]
"738
[; ;bme280.c: 738:             rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
[e = _rslt ( _bme280_compensate_data (4 , , , _sensor_comp -> &U _uncomp_data `*CS3 _comp_data &U . *U _dev 7 ]
"739
[; ;bme280.c: 739:         }
}
[e :U 55 ]
"740
[; ;bme280.c: 740:     }
}
[e $U 56  ]
"741
[; ;bme280.c: 741:     else
[e :U 54 ]
"742
[; ;bme280.c: 742:     {
{
"743
[; ;bme280.c: 743:         rslt = -1;
[e = _rslt -> -U -> 1 `i `c ]
"744
[; ;bme280.c: 744:     }
}
[e :U 56 ]
"746
[; ;bme280.c: 746:     return rslt;
[e ) _rslt ]
[e $UE 53  ]
"747
[; ;bme280.c: 747: }
[e :UE 53 ]
}
"754
[; ;bme280.c: 754: int8_t bme280_compensate_data(uint8_t sensor_comp,
[v _bme280_compensate_data `(c ~T0 @X0 1 ef4`uc`*CS3`*S2`*S1 ]
"758
[; ;bme280.c: 758: {
{
[e :U _bme280_compensate_data ]
"754
[; ;bme280.c: 754: int8_t bme280_compensate_data(uint8_t sensor_comp,
[v _sensor_comp `uc ~T0 @X0 1 r1 ]
"755
[; ;bme280.c: 755:                               const struct bme280_uncomp_data *uncomp_data,
[v _uncomp_data `*CS3 ~T0 @X0 1 r2 ]
"756
[; ;bme280.c: 756:                               struct bme280_data *comp_data,
[v _comp_data `*S2 ~T0 @X0 1 r3 ]
"757
[; ;bme280.c: 757:                               struct bme280_calib_data *calib_data)
[v _calib_data `*S1 ~T0 @X0 1 r4 ]
"758
[; ;bme280.c: 758: {
[f ]
"759
[; ;bme280.c: 759:     int8_t rslt = 0;
[v _rslt `c ~T0 @X0 1 a ]
[e = _rslt -> -> 0 `i `c ]
"761
[; ;bme280.c: 761:     if ((uncomp_data != ((void*)0)) && (comp_data != ((void*)0)) && (calib_data != ((void*)0)))
[e $ ! && && != _uncomp_data -> -> -> 0 `i `*v `*CS3 != _comp_data -> -> -> 0 `i `*v `*S2 != _calib_data -> -> -> 0 `i `*v `*S1 58  ]
"762
[; ;bme280.c: 762:     {
{
"764
[; ;bme280.c: 764:         comp_data->temperature = 0;
[e = . *U _comp_data 1 -> -> 0 `i `d ]
"765
[; ;bme280.c: 765:         comp_data->pressure = 0;
[e = . *U _comp_data 0 -> -> 0 `i `d ]
"766
[; ;bme280.c: 766:         comp_data->humidity = 0;
[e = . *U _comp_data 2 -> -> 0 `i `d ]
"769
[; ;bme280.c: 769:         if (sensor_comp & (1 | 1 << 1 | 1 << 2))
[e $ ! != & -> _sensor_comp `i | | -> 1 `i << -> 1 `i -> 1 `i << -> 1 `i -> 2 `i -> 0 `i 59  ]
"770
[; ;bme280.c: 770:         {
{
"772
[; ;bme280.c: 772:             comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
[e = . *U _comp_data 1 ( _compensate_temperature (2 , _uncomp_data _calib_data ]
"773
[; ;bme280.c: 773:         }
}
[e :U 59 ]
"775
[; ;bme280.c: 775:         if (sensor_comp & 1)
[e $ ! != & -> _sensor_comp `i -> 1 `i -> 0 `i 60  ]
"776
[; ;bme280.c: 776:         {
{
"778
[; ;bme280.c: 778:             comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
[e = . *U _comp_data 0 ( _compensate_pressure (2 , _uncomp_data -> _calib_data `*CS1 ]
"779
[; ;bme280.c: 779:         }
}
[e :U 60 ]
"781
[; ;bme280.c: 781:         if (sensor_comp & 1 << 2)
[e $ ! != & -> _sensor_comp `i << -> 1 `i -> 2 `i -> 0 `i 61  ]
"782
[; ;bme280.c: 782:         {
{
"784
[; ;bme280.c: 784:             comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
[e = . *U _comp_data 2 ( _compensate_humidity (2 , _uncomp_data -> _calib_data `*CS1 ]
"785
[; ;bme280.c: 785:         }
}
[e :U 61 ]
"786
[; ;bme280.c: 786:     }
}
[e $U 62  ]
"787
[; ;bme280.c: 787:     else
[e :U 58 ]
"788
[; ;bme280.c: 788:     {
{
"789
[; ;bme280.c: 789:         rslt = -1;
[e = _rslt -> -U -> 1 `i `c ]
"790
[; ;bme280.c: 790:     }
}
[e :U 62 ]
"792
[; ;bme280.c: 792:     return rslt;
[e ) _rslt ]
[e $UE 57  ]
"793
[; ;bme280.c: 793: }
[e :UE 57 ]
}
"799
[; ;bme280.c: 799: int8_t bme280_cal_meas_delay(uint32_t *max_delay, const struct bme280_settings *settings)
[v _bme280_cal_meas_delay `(c ~T0 @X0 1 ef2`*ul`*CS4 ]
"800
[; ;bme280.c: 800: {
{
[e :U _bme280_cal_meas_delay ]
"799
[; ;bme280.c: 799: int8_t bme280_cal_meas_delay(uint32_t *max_delay, const struct bme280_settings *settings)
[v _max_delay `*ul ~T0 @X0 1 r1 ]
[v _settings `*CS4 ~T0 @X0 1 r2 ]
"800
[; ;bme280.c: 800: {
[f ]
"801
[; ;bme280.c: 801:     int8_t rslt = 0;
[v _rslt `c ~T0 @X0 1 a ]
[e = _rslt -> -> 0 `i `c ]
"802
[; ;bme280.c: 802:     uint8_t temp_osr;
[v _temp_osr `uc ~T0 @X0 1 a ]
"803
[; ;bme280.c: 803:     uint8_t pres_osr;
[v _pres_osr `uc ~T0 @X0 1 a ]
"804
[; ;bme280.c: 804:     uint8_t hum_osr;
[v _hum_osr `uc ~T0 @X0 1 a ]
[v F302 `uc ~T0 @X0 -> 6 `i s ]
[i F302
:U ..
"807
[; ;bme280.c: 807:     uint8_t osr_sett_to_act_osr[] = { 0, 1, 2, 4, 8, 16 };
-> -> 0 `i `uc
-> -> 1 `i `uc
-> -> 2 `i `uc
-> -> 4 `i `uc
-> -> 8 `i `uc
-> -> 16 `i `uc
..
]
[v _osr_sett_to_act_osr `uc ~T0 @X0 -> 6 `i a ]
[e = _osr_sett_to_act_osr F302 ]
"809
[; ;bme280.c: 809:     if ((settings != ((void*)0)) && (max_delay != ((void*)0)))
[e $ ! && != _settings -> -> -> 0 `i `*v `*CS4 != _max_delay -> -> -> 0 `i `*v `*ul 64  ]
"810
[; ;bme280.c: 810:     {
{
"812
[; ;bme280.c: 812:         if (settings->osr_t <= 0x05)
[e $ ! <= -> . *U _settings 1 `i -> 5 `i 65  ]
"813
[; ;bme280.c: 813:         {
{
"814
[; ;bme280.c: 814:             temp_osr = osr_sett_to_act_osr[settings->osr_t];
[e = _temp_osr *U + &U _osr_sett_to_act_osr * -> . *U _settings 1 `ux -> -> # *U &U _osr_sett_to_act_osr `ui `ux ]
"815
[; ;bme280.c: 815:         }
}
[e $U 66  ]
"816
[; ;bme280.c: 816:         else
[e :U 65 ]
"817
[; ;bme280.c: 817:         {
{
"818
[; ;bme280.c: 818:             temp_osr = 16;
[e = _temp_osr -> -> 16 `i `uc ]
"819
[; ;bme280.c: 819:         }
}
[e :U 66 ]
"821
[; ;bme280.c: 821:         if (settings->osr_p <= 0x05)
[e $ ! <= -> . *U _settings 0 `i -> 5 `i 67  ]
"822
[; ;bme280.c: 822:         {
{
"823
[; ;bme280.c: 823:             pres_osr = osr_sett_to_act_osr[settings->osr_p];
[e = _pres_osr *U + &U _osr_sett_to_act_osr * -> . *U _settings 0 `ux -> -> # *U &U _osr_sett_to_act_osr `ui `ux ]
"824
[; ;bme280.c: 824:         }
}
[e $U 68  ]
"825
[; ;bme280.c: 825:         else
[e :U 67 ]
"826
[; ;bme280.c: 826:         {
{
"827
[; ;bme280.c: 827:             pres_osr = 16;
[e = _pres_osr -> -> 16 `i `uc ]
"828
[; ;bme280.c: 828:         }
}
[e :U 68 ]
"830
[; ;bme280.c: 830:         if (settings->osr_h <= 0x05)
[e $ ! <= -> . *U _settings 2 `i -> 5 `i 69  ]
"831
[; ;bme280.c: 831:         {
{
"832
[; ;bme280.c: 832:             hum_osr = osr_sett_to_act_osr[settings->osr_h];
[e = _hum_osr *U + &U _osr_sett_to_act_osr * -> . *U _settings 2 `ux -> -> # *U &U _osr_sett_to_act_osr `ui `ux ]
"833
[; ;bme280.c: 833:         }
}
[e $U 70  ]
"834
[; ;bme280.c: 834:         else
[e :U 69 ]
"835
[; ;bme280.c: 835:         {
{
"836
[; ;bme280.c: 836:             hum_osr = 16;
[e = _hum_osr -> -> 16 `i `uc ]
"837
[; ;bme280.c: 837:         }
}
[e :U 70 ]
"839
[; ;bme280.c: 839:         (*max_delay) =
[e = *U _max_delay -> + + + -> 1250 `i * -> 2300 `i -> _temp_osr `i + * -> 2300 `i -> _pres_osr `i -> 575 `i + * -> 2300 `i -> _hum_osr `i -> 575 `i `ul ]
"843
[; ;bme280.c: 843:     }
}
[e $U 71  ]
"844
[; ;bme280.c: 844:     else
[e :U 64 ]
"845
[; ;bme280.c: 845:     {
{
"846
[; ;bme280.c: 846:         rslt = -1;
[e = _rslt -> -U -> 1 `i `c ]
"847
[; ;bme280.c: 847:     }
}
[e :U 71 ]
"849
[; ;bme280.c: 849:     return rslt;
[e ) _rslt ]
[e $UE 63  ]
"850
[; ;bme280.c: 850: }
[e :UE 63 ]
}
"859
[; ;bme280.c: 859: static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
[v _set_osr_settings `(c ~T0 @X0 1 sf3`uc`*CS4`*S5 ]
"860
[; ;bme280.c: 860: {
{
[e :U _set_osr_settings ]
"859
[; ;bme280.c: 859: static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings, struct bme280_dev *dev)
[v _desired_settings `uc ~T0 @X0 1 r1 ]
[v _settings `*CS4 ~T0 @X0 1 r2 ]
[v _dev `*S5 ~T0 @X0 1 r3 ]
"860
[; ;bme280.c: 860: {
[f ]
"861
[; ;bme280.c: 861:     int8_t rslt = 1;
[v _rslt `c ~T0 @X0 1 a ]
[e = _rslt -> -> 1 `i `c ]
"863
[; ;bme280.c: 863:     if (desired_settings & 1 << 2)
[e $ ! != & -> _desired_settings `i << -> 1 `i -> 2 `i -> 0 `i 73  ]
"864
[; ;bme280.c: 864:     {
{
"865
[; ;bme280.c: 865:         rslt = set_osr_humidity_settings(settings, dev);
[e = _rslt ( _set_osr_humidity_settings (2 , _settings _dev ]
"866
[; ;bme280.c: 866:     }
}
[e :U 73 ]
"868
[; ;bme280.c: 868:     if (desired_settings & (1 | 1 << 1))
[e $ ! != & -> _desired_settings `i | -> 1 `i << -> 1 `i -> 1 `i -> 0 `i 74  ]
"869
[; ;bme280.c: 869:     {
{
"870
[; ;bme280.c: 870:         rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
[e = _rslt ( _set_osr_press_temp_settings (3 , , _desired_settings _settings _dev ]
"871
[; ;bme280.c: 871:     }
}
[e :U 74 ]
"873
[; ;bme280.c: 873:     return rslt;
[e ) _rslt ]
[e $UE 72  ]
"874
[; ;bme280.c: 874: }
[e :UE 72 ]
}
"879
[; ;bme280.c: 879: static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
[v _set_osr_humidity_settings `(c ~T0 @X0 1 sf2`*CS4`*S5 ]
"880
[; ;bme280.c: 880: {
{
[e :U _set_osr_humidity_settings ]
"879
[; ;bme280.c: 879: static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
[v _settings `*CS4 ~T0 @X0 1 r1 ]
[v _dev `*S5 ~T0 @X0 1 r2 ]
"880
[; ;bme280.c: 880: {
[f ]
"881
[; ;bme280.c: 881:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"882
[; ;bme280.c: 882:     uint8_t ctrl_hum;
[v _ctrl_hum `uc ~T0 @X0 1 a ]
"883
[; ;bme280.c: 883:     uint8_t ctrl_meas;
[v _ctrl_meas `uc ~T0 @X0 1 a ]
"884
[; ;bme280.c: 884:     uint8_t reg_addr = 0xF2;
[v _reg_addr `uc ~T0 @X0 1 a ]
[e = _reg_addr -> -> 242 `i `uc ]
"886
[; ;bme280.c: 886:     ctrl_hum = settings->osr_h & 0x07;
[e = _ctrl_hum -> & -> . *U _settings 2 `i -> 7 `i `uc ]
"889
[; ;bme280.c: 889:     rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
[e = _rslt ( _bme280_set_regs (4 , , , &U _reg_addr -> &U _ctrl_hum `*Cuc -> -> -> 1 `i `l `ul _dev ]
"894
[; ;bme280.c: 894:     if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 76  ]
"895
[; ;bme280.c: 895:     {
{
"896
[; ;bme280.c: 896:         reg_addr = 0xF4;
[e = _reg_addr -> -> 244 `i `uc ]
"897
[; ;bme280.c: 897:         rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
[e = _rslt ( _bme280_get_regs (4 , , , _reg_addr &U _ctrl_meas -> -> -> 1 `i `l `ul _dev ]
"899
[; ;bme280.c: 899:         if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 77  ]
"900
[; ;bme280.c: 900:         {
{
"901
[; ;bme280.c: 901:             rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
[e = _rslt ( _bme280_set_regs (4 , , , &U _reg_addr -> &U _ctrl_meas `*Cuc -> -> -> 1 `i `l `ul _dev ]
"902
[; ;bme280.c: 902:         }
}
[e :U 77 ]
"903
[; ;bme280.c: 903:     }
}
[e :U 76 ]
"905
[; ;bme280.c: 905:     return rslt;
[e ) _rslt ]
[e $UE 75  ]
"906
[; ;bme280.c: 906: }
[e :UE 75 ]
}
"912
[; ;bme280.c: 912: static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
[v _set_osr_press_temp_settings `(c ~T0 @X0 1 sf3`uc`*CS4`*S5 ]
"915
[; ;bme280.c: 915: {
{
[e :U _set_osr_press_temp_settings ]
"912
[; ;bme280.c: 912: static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
[v _desired_settings `uc ~T0 @X0 1 r1 ]
"913
[; ;bme280.c: 913:                                           const struct bme280_settings *settings,
[v _settings `*CS4 ~T0 @X0 1 r2 ]
"914
[; ;bme280.c: 914:                                           struct bme280_dev *dev)
[v _dev `*S5 ~T0 @X0 1 r3 ]
"915
[; ;bme280.c: 915: {
[f ]
"916
[; ;bme280.c: 916:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"917
[; ;bme280.c: 917:     uint8_t reg_addr = 0xF4;
[v _reg_addr `uc ~T0 @X0 1 a ]
[e = _reg_addr -> -> 244 `i `uc ]
"918
[; ;bme280.c: 918:     uint8_t reg_data;
[v _reg_data `uc ~T0 @X0 1 a ]
"920
[; ;bme280.c: 920:     rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
[e = _rslt ( _bme280_get_regs (4 , , , _reg_addr &U _reg_data -> -> -> 1 `i `l `ul _dev ]
"922
[; ;bme280.c: 922:     if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 79  ]
"923
[; ;bme280.c: 923:     {
{
"924
[; ;bme280.c: 924:         if (desired_settings & 1)
[e $ ! != & -> _desired_settings `i -> 1 `i -> 0 `i 80  ]
"925
[; ;bme280.c: 925:         {
{
"926
[; ;bme280.c: 926:             fill_osr_press_settings(&reg_data, settings);
[e ( _fill_osr_press_settings (2 , &U _reg_data _settings ]
"927
[; ;bme280.c: 927:         }
}
[e :U 80 ]
"929
[; ;bme280.c: 929:         if (desired_settings & 1 << 1)
[e $ ! != & -> _desired_settings `i << -> 1 `i -> 1 `i -> 0 `i 81  ]
"930
[; ;bme280.c: 930:         {
{
"931
[; ;bme280.c: 931:             fill_osr_temp_settings(&reg_data, settings);
[e ( _fill_osr_temp_settings (2 , &U _reg_data _settings ]
"932
[; ;bme280.c: 932:         }
}
[e :U 81 ]
"935
[; ;bme280.c: 935:         rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
[e = _rslt ( _bme280_set_regs (4 , , , &U _reg_addr -> &U _reg_data `*Cuc -> -> -> 1 `i `l `ul _dev ]
"936
[; ;bme280.c: 936:     }
}
[e :U 79 ]
"938
[; ;bme280.c: 938:     return rslt;
[e ) _rslt ]
[e $UE 78  ]
"939
[; ;bme280.c: 939: }
[e :UE 78 ]
}
"945
[; ;bme280.c: 945: static int8_t set_filter_standby_settings(uint8_t desired_settings,
[v _set_filter_standby_settings `(c ~T0 @X0 1 sf3`uc`*CS4`*S5 ]
"948
[; ;bme280.c: 948: {
{
[e :U _set_filter_standby_settings ]
"945
[; ;bme280.c: 945: static int8_t set_filter_standby_settings(uint8_t desired_settings,
[v _desired_settings `uc ~T0 @X0 1 r1 ]
"946
[; ;bme280.c: 946:                                           const struct bme280_settings *settings,
[v _settings `*CS4 ~T0 @X0 1 r2 ]
"947
[; ;bme280.c: 947:                                           struct bme280_dev *dev)
[v _dev `*S5 ~T0 @X0 1 r3 ]
"948
[; ;bme280.c: 948: {
[f ]
"949
[; ;bme280.c: 949:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"950
[; ;bme280.c: 950:     uint8_t reg_addr = 0xF5;
[v _reg_addr `uc ~T0 @X0 1 a ]
[e = _reg_addr -> -> 245 `i `uc ]
"951
[; ;bme280.c: 951:     uint8_t reg_data;
[v _reg_data `uc ~T0 @X0 1 a ]
"953
[; ;bme280.c: 953:     rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
[e = _rslt ( _bme280_get_regs (4 , , , _reg_addr &U _reg_data -> -> -> 1 `i `l `ul _dev ]
"955
[; ;bme280.c: 955:     if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 83  ]
"956
[; ;bme280.c: 956:     {
{
"957
[; ;bme280.c: 957:         if (desired_settings & 1 << 3)
[e $ ! != & -> _desired_settings `i << -> 1 `i -> 3 `i -> 0 `i 84  ]
"958
[; ;bme280.c: 958:         {
{
"959
[; ;bme280.c: 959:             fill_filter_settings(&reg_data, settings);
[e ( _fill_filter_settings (2 , &U _reg_data _settings ]
"960
[; ;bme280.c: 960:         }
}
[e :U 84 ]
"962
[; ;bme280.c: 962:         if (desired_settings & 1 << 4)
[e $ ! != & -> _desired_settings `i << -> 1 `i -> 4 `i -> 0 `i 85  ]
"963
[; ;bme280.c: 963:         {
{
"964
[; ;bme280.c: 964:             fill_standby_settings(&reg_data, settings);
[e ( _fill_standby_settings (2 , &U _reg_data _settings ]
"965
[; ;bme280.c: 965:         }
}
[e :U 85 ]
"968
[; ;bme280.c: 968:         rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
[e = _rslt ( _bme280_set_regs (4 , , , &U _reg_addr -> &U _reg_data `*Cuc -> -> -> 1 `i `l `ul _dev ]
"969
[; ;bme280.c: 969:     }
}
[e :U 83 ]
"971
[; ;bme280.c: 971:     return rslt;
[e ) _rslt ]
[e $UE 82  ]
"972
[; ;bme280.c: 972: }
[e :UE 82 ]
}
"978
[; ;bme280.c: 978: static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
[v _fill_filter_settings `(v ~T0 @X0 1 sf2`*uc`*CS4 ]
"979
[; ;bme280.c: 979: {
{
[e :U _fill_filter_settings ]
"978
[; ;bme280.c: 978: static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
[v _reg_data `*uc ~T0 @X0 1 r1 ]
[v _settings `*CS4 ~T0 @X0 1 r2 ]
"979
[; ;bme280.c: 979: {
[f ]
"980
[; ;bme280.c: 980:     *reg_data = ((*reg_data & ~( 0x1C)) | ((settings->filter << 0x02) & 0x1C));
[e = *U _reg_data -> | & -> *U _reg_data `i ~ -> 28 `i & << -> . *U _settings 3 `i -> 2 `i -> 28 `i `uc ]
"981
[; ;bme280.c: 981: }
[e :UE 86 ]
}
"987
[; ;bme280.c: 987: static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
[v _fill_standby_settings `(v ~T0 @X0 1 sf2`*uc`*CS4 ]
"988
[; ;bme280.c: 988: {
{
[e :U _fill_standby_settings ]
"987
[; ;bme280.c: 987: static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
[v _reg_data `*uc ~T0 @X0 1 r1 ]
[v _settings `*CS4 ~T0 @X0 1 r2 ]
"988
[; ;bme280.c: 988: {
[f ]
"989
[; ;bme280.c: 989:     *reg_data = ((*reg_data & ~( 0xE0)) | ((settings->standby_time << 0x05) & 0xE0));
[e = *U _reg_data -> | & -> *U _reg_data `i ~ -> 224 `i & << -> . *U _settings 4 `i -> 5 `i -> 224 `i `uc ]
"990
[; ;bme280.c: 990: }
[e :UE 87 ]
}
"996
[; ;bme280.c: 996: static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
[v _fill_osr_press_settings `(v ~T0 @X0 1 sf2`*uc`*CS4 ]
"997
[; ;bme280.c: 997: {
{
[e :U _fill_osr_press_settings ]
"996
[; ;bme280.c: 996: static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
[v _reg_data `*uc ~T0 @X0 1 r1 ]
[v _settings `*CS4 ~T0 @X0 1 r2 ]
"997
[; ;bme280.c: 997: {
[f ]
"998
[; ;bme280.c: 998:     *reg_data = ((*reg_data & ~( 0x1C)) | ((settings->osr_p << 0x02) & 0x1C));
[e = *U _reg_data -> | & -> *U _reg_data `i ~ -> 28 `i & << -> . *U _settings 0 `i -> 2 `i -> 28 `i `uc ]
"999
[; ;bme280.c: 999: }
[e :UE 88 ]
}
"1005
[; ;bme280.c: 1005: static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
[v _fill_osr_temp_settings `(v ~T0 @X0 1 sf2`*uc`*CS4 ]
"1006
[; ;bme280.c: 1006: {
{
[e :U _fill_osr_temp_settings ]
"1005
[; ;bme280.c: 1005: static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
[v _reg_data `*uc ~T0 @X0 1 r1 ]
[v _settings `*CS4 ~T0 @X0 1 r2 ]
"1006
[; ;bme280.c: 1006: {
[f ]
"1007
[; ;bme280.c: 1007:     *reg_data = ((*reg_data & ~( 0xE0)) | ((settings->osr_t << 0x05) & 0xE0));
[e = *U _reg_data -> | & -> *U _reg_data `i ~ -> 224 `i & << -> . *U _settings 1 `i -> 5 `i -> 224 `i `uc ]
"1008
[; ;bme280.c: 1008: }
[e :UE 89 ]
}
"1015
[; ;bme280.c: 1015: static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
[v _parse_device_settings `(v ~T0 @X0 1 sf2`*Cuc`*S4 ]
"1016
[; ;bme280.c: 1016: {
{
[e :U _parse_device_settings ]
"1015
[; ;bme280.c: 1015: static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
[v _reg_data `*Cuc ~T0 @X0 1 r1 ]
[v _settings `*S4 ~T0 @X0 1 r2 ]
"1016
[; ;bme280.c: 1016: {
[f ]
"1017
[; ;bme280.c: 1017:     settings->osr_h = (reg_data[0] & ( 0x07));
[e = . *U _settings 2 -> & -> *U + _reg_data * -> -> 0 `i `x -> -> # *U _reg_data `i `x `i -> 7 `i `uc ]
"1018
[; ;bme280.c: 1018:     settings->osr_p = ((reg_data[2] & ( 0x1C)) >> ( 0x02));
[e = . *U _settings 0 -> >> & -> *U + _reg_data * -> -> 2 `i `x -> -> # *U _reg_data `i `x `i -> 28 `i -> 2 `i `uc ]
"1019
[; ;bme280.c: 1019:     settings->osr_t = ((reg_data[2] & ( 0xE0)) >> ( 0x05));
[e = . *U _settings 1 -> >> & -> *U + _reg_data * -> -> 2 `i `x -> -> # *U _reg_data `i `x `i -> 224 `i -> 5 `i `uc ]
"1020
[; ;bme280.c: 1020:     settings->filter = ((reg_data[3] & ( 0x1C)) >> ( 0x02));
[e = . *U _settings 3 -> >> & -> *U + _reg_data * -> -> 3 `i `x -> -> # *U _reg_data `i `x `i -> 28 `i -> 2 `i `uc ]
"1021
[; ;bme280.c: 1021:     settings->standby_time = ((reg_data[3] & ( 0xE0)) >> ( 0x05));
[e = . *U _settings 4 -> >> & -> *U + _reg_data * -> -> 3 `i `x -> -> # *U _reg_data `i `x `i -> 224 `i -> 5 `i `uc ]
"1022
[; ;bme280.c: 1022: }
[e :UE 90 ]
}
"1028
[; ;bme280.c: 1028: static void parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
[v _parse_sensor_data `(v ~T0 @X0 1 sf2`*Cuc`*S3 ]
"1029
[; ;bme280.c: 1029: {
{
[e :U _parse_sensor_data ]
"1028
[; ;bme280.c: 1028: static void parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
[v _reg_data `*Cuc ~T0 @X0 1 r1 ]
[v _uncomp_data `*S3 ~T0 @X0 1 r2 ]
"1029
[; ;bme280.c: 1029: {
[f ]
"1031
[; ;bme280.c: 1031:     uint32_t data_xlsb;
[v _data_xlsb `ul ~T0 @X0 1 a ]
"1032
[; ;bme280.c: 1032:     uint32_t data_lsb;
[v _data_lsb `ul ~T0 @X0 1 a ]
"1033
[; ;bme280.c: 1033:     uint32_t data_msb;
[v _data_msb `ul ~T0 @X0 1 a ]
"1036
[; ;bme280.c: 1036:     data_msb = (uint32_t)reg_data[0] << 12;
[e = _data_msb << -> *U + _reg_data * -> -> 0 `i `x -> -> # *U _reg_data `i `x `ul -> 12 `i ]
"1037
[; ;bme280.c: 1037:     data_lsb = (uint32_t)reg_data[1] << 4;
[e = _data_lsb << -> *U + _reg_data * -> -> 1 `i `x -> -> # *U _reg_data `i `x `ul -> 4 `i ]
"1038
[; ;bme280.c: 1038:     data_xlsb = (uint32_t)reg_data[2] >> 4;
[e = _data_xlsb >> -> *U + _reg_data * -> -> 2 `i `x -> -> # *U _reg_data `i `x `ul -> 4 `i ]
"1039
[; ;bme280.c: 1039:     uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
[e = . *U _uncomp_data 0 | | _data_msb _data_lsb _data_xlsb ]
"1042
[; ;bme280.c: 1042:     data_msb = (uint32_t)reg_data[3] << 12;
[e = _data_msb << -> *U + _reg_data * -> -> 3 `i `x -> -> # *U _reg_data `i `x `ul -> 12 `i ]
"1043
[; ;bme280.c: 1043:     data_lsb = (uint32_t)reg_data[4] << 4;
[e = _data_lsb << -> *U + _reg_data * -> -> 4 `i `x -> -> # *U _reg_data `i `x `ul -> 4 `i ]
"1044
[; ;bme280.c: 1044:     data_xlsb = (uint32_t)reg_data[5] >> 4;
[e = _data_xlsb >> -> *U + _reg_data * -> -> 5 `i `x -> -> # *U _reg_data `i `x `ul -> 4 `i ]
"1045
[; ;bme280.c: 1045:     uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
[e = . *U _uncomp_data 1 | | _data_msb _data_lsb _data_xlsb ]
"1048
[; ;bme280.c: 1048:     data_msb = (uint32_t)reg_data[6] << 8;
[e = _data_msb << -> *U + _reg_data * -> -> 6 `i `x -> -> # *U _reg_data `i `x `ul -> 8 `i ]
"1049
[; ;bme280.c: 1049:     data_lsb = (uint32_t)reg_data[7];
[e = _data_lsb -> *U + _reg_data * -> -> 7 `i `x -> -> # *U _reg_data `i `x `ul ]
"1050
[; ;bme280.c: 1050:     uncomp_data->humidity = data_msb | data_lsb;
[e = . *U _uncomp_data 2 | _data_msb _data_lsb ]
"1051
[; ;bme280.c: 1051: }
[e :UE 91 ]
}
"1056
[; ;bme280.c: 1056: static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
[v _write_power_mode `(c ~T0 @X0 1 sf2`uc`*S5 ]
"1057
[; ;bme280.c: 1057: {
{
[e :U _write_power_mode ]
"1056
[; ;bme280.c: 1056: static int8_t write_power_mode(uint8_t sensor_mode, struct bme280_dev *dev)
[v _sensor_mode `uc ~T0 @X0 1 r1 ]
[v _dev `*S5 ~T0 @X0 1 r2 ]
"1057
[; ;bme280.c: 1057: {
[f ]
"1058
[; ;bme280.c: 1058:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"1059
[; ;bme280.c: 1059:     uint8_t reg_addr = 0xF4;
[v _reg_addr `uc ~T0 @X0 1 a ]
[e = _reg_addr -> -> 244 `i `uc ]
"1062
[; ;bme280.c: 1062:     uint8_t sensor_mode_reg_val;
[v _sensor_mode_reg_val `uc ~T0 @X0 1 a ]
"1065
[; ;bme280.c: 1065:     rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
[e = _rslt ( _bme280_get_regs (4 , , , _reg_addr &U _sensor_mode_reg_val -> -> -> 1 `i `l `ul _dev ]
"1068
[; ;bme280.c: 1068:     if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 93  ]
"1069
[; ;bme280.c: 1069:     {
{
"1070
[; ;bme280.c: 1070:         sensor_mode_reg_val = ((sensor_mode_reg_val & ~( 0x03)) | (sensor_mode & 0x03));
[e = _sensor_mode_reg_val -> | & -> _sensor_mode_reg_val `i ~ -> 3 `i & -> _sensor_mode `i -> 3 `i `uc ]
"1073
[; ;bme280.c: 1073:         rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
[e = _rslt ( _bme280_set_regs (4 , , , &U _reg_addr -> &U _sensor_mode_reg_val `*Cuc -> -> -> 1 `i `l `ul _dev ]
"1074
[; ;bme280.c: 1074:     }
}
[e :U 93 ]
"1076
[; ;bme280.c: 1076:     return rslt;
[e ) _rslt ]
[e $UE 92  ]
"1077
[; ;bme280.c: 1077: }
[e :UE 92 ]
}
"1082
[; ;bme280.c: 1082: static int8_t put_device_to_sleep(struct bme280_dev *dev)
[v _put_device_to_sleep `(c ~T0 @X0 1 sf1`*S5 ]
"1083
[; ;bme280.c: 1083: {
{
[e :U _put_device_to_sleep ]
"1082
[; ;bme280.c: 1082: static int8_t put_device_to_sleep(struct bme280_dev *dev)
[v _dev `*S5 ~T0 @X0 1 r1 ]
"1083
[; ;bme280.c: 1083: {
[f ]
"1084
[; ;bme280.c: 1084:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"1085
[; ;bme280.c: 1085:     uint8_t reg_data[4];
[v _reg_data `uc ~T0 @X0 -> 4 `i a ]
"1086
[; ;bme280.c: 1086:     struct bme280_settings settings;
[v _settings `S4 ~T0 @X0 1 a ]
"1088
[; ;bme280.c: 1088:     rslt = bme280_get_regs(0xF2, reg_data, 4, dev);
[e = _rslt ( _bme280_get_regs (4 , , , -> -> 242 `i `uc &U _reg_data -> -> -> 4 `i `l `ul _dev ]
"1090
[; ;bme280.c: 1090:     if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 95  ]
"1091
[; ;bme280.c: 1091:     {
{
"1092
[; ;bme280.c: 1092:         parse_device_settings(reg_data, &settings);
[e ( _parse_device_settings (2 , -> &U _reg_data `*Cuc &U _settings ]
"1093
[; ;bme280.c: 1093:         rslt = bme280_soft_reset(dev);
[e = _rslt ( _bme280_soft_reset (1 _dev ]
"1095
[; ;bme280.c: 1095:         if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 96  ]
"1096
[; ;bme280.c: 1096:         {
{
"1097
[; ;bme280.c: 1097:             rslt = reload_device_settings(&settings, dev);
[e = _rslt ( _reload_device_settings (2 , -> &U _settings `*CS4 _dev ]
"1098
[; ;bme280.c: 1098:         }
}
[e :U 96 ]
"1099
[; ;bme280.c: 1099:     }
}
[e :U 95 ]
"1101
[; ;bme280.c: 1101:     return rslt;
[e ) _rslt ]
[e $UE 94  ]
"1102
[; ;bme280.c: 1102: }
[e :UE 94 ]
}
"1108
[; ;bme280.c: 1108: static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
[v _reload_device_settings `(c ~T0 @X0 1 sf2`*CS4`*S5 ]
"1109
[; ;bme280.c: 1109: {
{
[e :U _reload_device_settings ]
"1108
[; ;bme280.c: 1108: static int8_t reload_device_settings(const struct bme280_settings *settings, struct bme280_dev *dev)
[v _settings `*CS4 ~T0 @X0 1 r1 ]
[v _dev `*S5 ~T0 @X0 1 r2 ]
"1109
[; ;bme280.c: 1109: {
[f ]
"1110
[; ;bme280.c: 1110:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"1112
[; ;bme280.c: 1112:     rslt = set_osr_settings(0x1F, settings, dev);
[e = _rslt ( _set_osr_settings (3 , , -> -> 31 `i `uc _settings _dev ]
"1114
[; ;bme280.c: 1114:     if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 98  ]
"1115
[; ;bme280.c: 1115:     {
{
"1116
[; ;bme280.c: 1116:         rslt = set_filter_standby_settings(0x1F, settings, dev);
[e = _rslt ( _set_filter_standby_settings (3 , , -> -> 31 `i `uc _settings _dev ]
"1117
[; ;bme280.c: 1117:     }
}
[e :U 98 ]
"1119
[; ;bme280.c: 1119:     return rslt;
[e ) _rslt ]
[e $UE 97  ]
"1120
[; ;bme280.c: 1120: }
[e :UE 97 ]
}
"1128
[; ;bme280.c: 1128: static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
[v _compensate_temperature `(d ~T0 @X0 1 sf2`*CS3`*S1 ]
"1129
[; ;bme280.c: 1129: {
{
[e :U _compensate_temperature ]
"1128
[; ;bme280.c: 1128: static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
[v _uncomp_data `*CS3 ~T0 @X0 1 r1 ]
[v _calib_data `*S1 ~T0 @X0 1 r2 ]
"1129
[; ;bme280.c: 1129: {
[f ]
"1130
[; ;bme280.c: 1130:     double var1;
[v _var1 `d ~T0 @X0 1 a ]
"1131
[; ;bme280.c: 1131:     double var2;
[v _var2 `d ~T0 @X0 1 a ]
"1132
[; ;bme280.c: 1132:     double temperature;
[v _temperature `d ~T0 @X0 1 a ]
"1133
[; ;bme280.c: 1133:     double temperature_min = -40;
[v _temperature_min `d ~T0 @X0 1 a ]
[e = _temperature_min -> -U -> 40 `i `d ]
"1134
[; ;bme280.c: 1134:     double temperature_max = 85;
[v _temperature_max `d ~T0 @X0 1 a ]
[e = _temperature_max -> -> 85 `i `d ]
"1136
[; ;bme280.c: 1136:     var1 = (((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_t1) / 1024.0);
[e = _var1 - / -> . *U _uncomp_data 1 `d .16384.0 / -> . *U _calib_data 0 `d .1024.0 ]
"1137
[; ;bme280.c: 1137:     var1 = var1 * ((double)calib_data->dig_t2);
[e = _var1 * _var1 -> . *U _calib_data 1 `d ]
"1138
[; ;bme280.c: 1138:     var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_t1) / 8192.0);
[e = _var2 - / -> . *U _uncomp_data 1 `d .131072.0 / -> . *U _calib_data 0 `d .8192.0 ]
"1139
[; ;bme280.c: 1139:     var2 = (var2 * var2) * ((double)calib_data->dig_t3);
[e = _var2 * * _var2 _var2 -> . *U _calib_data 2 `d ]
"1140
[; ;bme280.c: 1140:     calib_data->t_fine = (int32_t)(var1 + var2);
[e = . *U _calib_data 18 -> + _var1 _var2 `l ]
"1141
[; ;bme280.c: 1141:     temperature = (var1 + var2) / 5120.0;
[e = _temperature / + _var1 _var2 .5120.0 ]
"1143
[; ;bme280.c: 1143:     if (temperature < temperature_min)
[e $ ! < _temperature _temperature_min 100  ]
"1144
[; ;bme280.c: 1144:     {
{
"1145
[; ;bme280.c: 1145:         temperature = temperature_min;
[e = _temperature _temperature_min ]
"1146
[; ;bme280.c: 1146:     }
}
[e $U 101  ]
"1147
[; ;bme280.c: 1147:     else if (temperature > temperature_max)
[e :U 100 ]
[e $ ! > _temperature _temperature_max 102  ]
"1148
[; ;bme280.c: 1148:     {
{
"1149
[; ;bme280.c: 1149:         temperature = temperature_max;
[e = _temperature _temperature_max ]
"1150
[; ;bme280.c: 1150:     }
}
[e :U 102 ]
[e :U 101 ]
"1152
[; ;bme280.c: 1152:     return temperature;
[e ) _temperature ]
[e $UE 99  ]
"1153
[; ;bme280.c: 1153: }
[e :UE 99 ]
}
"1159
[; ;bme280.c: 1159: static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
[v _compensate_pressure `(d ~T0 @X0 1 sf2`*CS3`*CS1 ]
"1161
[; ;bme280.c: 1161: {
{
[e :U _compensate_pressure ]
"1159
[; ;bme280.c: 1159: static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
[v _uncomp_data `*CS3 ~T0 @X0 1 r1 ]
"1160
[; ;bme280.c: 1160:                                   const struct bme280_calib_data *calib_data)
[v _calib_data `*CS1 ~T0 @X0 1 r2 ]
"1161
[; ;bme280.c: 1161: {
[f ]
"1162
[; ;bme280.c: 1162:     double var1;
[v _var1 `d ~T0 @X0 1 a ]
"1163
[; ;bme280.c: 1163:     double var2;
[v _var2 `d ~T0 @X0 1 a ]
"1164
[; ;bme280.c: 1164:     double var3;
[v _var3 `d ~T0 @X0 1 a ]
"1165
[; ;bme280.c: 1165:     double pressure;
[v _pressure `d ~T0 @X0 1 a ]
"1166
[; ;bme280.c: 1166:     double pressure_min = 30000.0;
[v _pressure_min `d ~T0 @X0 1 a ]
[e = _pressure_min .30000.0 ]
"1167
[; ;bme280.c: 1167:     double pressure_max = 110000.0;
[v _pressure_max `d ~T0 @X0 1 a ]
[e = _pressure_max .110000.0 ]
"1169
[; ;bme280.c: 1169:     var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
[e = _var1 - / -> . *U _calib_data 18 `d .2.0 .64000.0 ]
"1170
[; ;bme280.c: 1170:     var2 = var1 * var1 * ((double)calib_data->dig_p6) / 32768.0;
[e = _var2 / * * _var1 _var1 -> . *U _calib_data 8 `d .32768.0 ]
"1171
[; ;bme280.c: 1171:     var2 = var2 + var1 * ((double)calib_data->dig_p5) * 2.0;
[e = _var2 + _var2 * * _var1 -> . *U _calib_data 7 `d .2.0 ]
"1172
[; ;bme280.c: 1172:     var2 = (var2 / 4.0) + (((double)calib_data->dig_p4) * 65536.0);
[e = _var2 + / _var2 .4.0 * -> . *U _calib_data 6 `d .65536.0 ]
"1173
[; ;bme280.c: 1173:     var3 = ((double)calib_data->dig_p3) * var1 * var1 / 524288.0;
[e = _var3 / * * -> . *U _calib_data 5 `d _var1 _var1 .524288.0 ]
"1174
[; ;bme280.c: 1174:     var1 = (var3 + ((double)calib_data->dig_p2) * var1) / 524288.0;
[e = _var1 / + _var3 * -> . *U _calib_data 4 `d _var1 .524288.0 ]
"1175
[; ;bme280.c: 1175:     var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_p1);
[e = _var1 * + .1.0 / _var1 .32768.0 -> . *U _calib_data 3 `d ]
"1178
[; ;bme280.c: 1178:     if (var1 > (0.0))
[e $ ! > _var1 .0.0 104  ]
"1179
[; ;bme280.c: 1179:     {
{
"1180
[; ;bme280.c: 1180:         pressure = 1048576.0 - (double) uncomp_data->pressure;
[e = _pressure - .1048576.0 -> . *U _uncomp_data 0 `d ]
"1181
[; ;bme280.c: 1181:         pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
[e = _pressure / * - _pressure / _var2 .4096.0 .6250.0 _var1 ]
"1182
[; ;bme280.c: 1182:         var1 = ((double)calib_data->dig_p9) * pressure * pressure / 2147483648.0;
[e = _var1 / * * -> . *U _calib_data 11 `d _pressure _pressure .2147483648.0 ]
"1183
[; ;bme280.c: 1183:         var2 = pressure * ((double)calib_data->dig_p8) / 32768.0;
[e = _var2 / * _pressure -> . *U _calib_data 10 `d .32768.0 ]
"1184
[; ;bme280.c: 1184:         pressure = pressure + (var1 + var2 + ((double)calib_data->dig_p7)) / 16.0;
[e = _pressure + _pressure / + + _var1 _var2 -> . *U _calib_data 9 `d .16.0 ]
"1186
[; ;bme280.c: 1186:         if (pressure < pressure_min)
[e $ ! < _pressure _pressure_min 105  ]
"1187
[; ;bme280.c: 1187:         {
{
"1188
[; ;bme280.c: 1188:             pressure = pressure_min;
[e = _pressure _pressure_min ]
"1189
[; ;bme280.c: 1189:         }
}
[e $U 106  ]
"1190
[; ;bme280.c: 1190:         else if (pressure > pressure_max)
[e :U 105 ]
[e $ ! > _pressure _pressure_max 107  ]
"1191
[; ;bme280.c: 1191:         {
{
"1192
[; ;bme280.c: 1192:             pressure = pressure_max;
[e = _pressure _pressure_max ]
"1193
[; ;bme280.c: 1193:         }
}
[e :U 107 ]
[e :U 106 ]
"1194
[; ;bme280.c: 1194:     }
}
[e $U 108  ]
"1195
[; ;bme280.c: 1195:     else
[e :U 104 ]
"1196
[; ;bme280.c: 1196:     {
{
"1197
[; ;bme280.c: 1197:         pressure = pressure_min;
[e = _pressure _pressure_min ]
"1198
[; ;bme280.c: 1198:     }
}
[e :U 108 ]
"1200
[; ;bme280.c: 1200:     return pressure;
[e ) _pressure ]
[e $UE 103  ]
"1201
[; ;bme280.c: 1201: }
[e :UE 103 ]
}
"1207
[; ;bme280.c: 1207: static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
[v _compensate_humidity `(d ~T0 @X0 1 sf2`*CS3`*CS1 ]
"1209
[; ;bme280.c: 1209: {
{
[e :U _compensate_humidity ]
"1207
[; ;bme280.c: 1207: static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
[v _uncomp_data `*CS3 ~T0 @X0 1 r1 ]
"1208
[; ;bme280.c: 1208:                                   const struct bme280_calib_data *calib_data)
[v _calib_data `*CS1 ~T0 @X0 1 r2 ]
"1209
[; ;bme280.c: 1209: {
[f ]
"1210
[; ;bme280.c: 1210:     double humidity;
[v _humidity `d ~T0 @X0 1 a ]
"1211
[; ;bme280.c: 1211:     double humidity_min = 0.0;
[v _humidity_min `d ~T0 @X0 1 a ]
[e = _humidity_min .0.0 ]
"1212
[; ;bme280.c: 1212:     double humidity_max = 100.0;
[v _humidity_max `d ~T0 @X0 1 a ]
[e = _humidity_max .100.0 ]
"1213
[; ;bme280.c: 1213:     double var1;
[v _var1 `d ~T0 @X0 1 a ]
"1214
[; ;bme280.c: 1214:     double var2;
[v _var2 `d ~T0 @X0 1 a ]
"1215
[; ;bme280.c: 1215:     double var3;
[v _var3 `d ~T0 @X0 1 a ]
"1216
[; ;bme280.c: 1216:     double var4;
[v _var4 `d ~T0 @X0 1 a ]
"1217
[; ;bme280.c: 1217:     double var5;
[v _var5 `d ~T0 @X0 1 a ]
"1218
[; ;bme280.c: 1218:     double var6;
[v _var6 `d ~T0 @X0 1 a ]
"1220
[; ;bme280.c: 1220:     var1 = ((double)calib_data->t_fine) - 76800.0;
[e = _var1 - -> . *U _calib_data 18 `d .76800.0 ]
"1221
[; ;bme280.c: 1221:     var2 = (((double)calib_data->dig_h4) * 64.0 + (((double)calib_data->dig_h5) / 16384.0) * var1);
[e = _var2 + * -> . *U _calib_data 15 `d .64.0 * / -> . *U _calib_data 16 `d .16384.0 _var1 ]
"1222
[; ;bme280.c: 1222:     var3 = uncomp_data->humidity - var2;
[e = _var3 - -> . *U _uncomp_data 2 `d _var2 ]
"1223
[; ;bme280.c: 1223:     var4 = ((double)calib_data->dig_h2) / 65536.0;
[e = _var4 / -> . *U _calib_data 13 `d .65536.0 ]
"1224
[; ;bme280.c: 1224:     var5 = (1.0 + (((double)calib_data->dig_h3) / 67108864.0) * var1);
[e = _var5 + .1.0 * / -> . *U _calib_data 14 `d .67108864.0 _var1 ]
"1225
[; ;bme280.c: 1225:     var6 = 1.0 + (((double)calib_data->dig_h6) / 67108864.0) * var1 * var5;
[e = _var6 + .1.0 * * / -> . *U _calib_data 17 `d .67108864.0 _var1 _var5 ]
"1226
[; ;bme280.c: 1226:     var6 = var3 * var4 * (var5 * var6);
[e = _var6 * * _var3 _var4 * _var5 _var6 ]
"1227
[; ;bme280.c: 1227:     humidity = var6 * (1.0 - ((double)calib_data->dig_h1) * var6 / 524288.0);
[e = _humidity * _var6 - .1.0 / * -> . *U _calib_data 12 `d _var6 .524288.0 ]
"1229
[; ;bme280.c: 1229:     if (humidity > humidity_max)
[e $ ! > _humidity _humidity_max 110  ]
"1230
[; ;bme280.c: 1230:     {
{
"1231
[; ;bme280.c: 1231:         humidity = humidity_max;
[e = _humidity _humidity_max ]
"1232
[; ;bme280.c: 1232:     }
}
[e $U 111  ]
"1233
[; ;bme280.c: 1233:     else if (humidity < humidity_min)
[e :U 110 ]
[e $ ! < _humidity _humidity_min 112  ]
"1234
[; ;bme280.c: 1234:     {
{
"1235
[; ;bme280.c: 1235:         humidity = humidity_min;
[e = _humidity _humidity_min ]
"1236
[; ;bme280.c: 1236:     }
}
[e :U 112 ]
[e :U 111 ]
"1238
[; ;bme280.c: 1238:     return humidity;
[e ) _humidity ]
[e $UE 109  ]
"1239
[; ;bme280.c: 1239: }
[e :UE 109 ]
}
"1434
[; ;bme280.c: 1434: static int8_t get_calib_data(struct bme280_dev *dev)
[v _get_calib_data `(c ~T0 @X0 1 sf1`*S5 ]
"1435
[; ;bme280.c: 1435: {
{
[e :U _get_calib_data ]
"1434
[; ;bme280.c: 1434: static int8_t get_calib_data(struct bme280_dev *dev)
[v _dev `*S5 ~T0 @X0 1 r1 ]
"1435
[; ;bme280.c: 1435: {
[f ]
"1436
[; ;bme280.c: 1436:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"1437
[; ;bme280.c: 1437:     uint8_t reg_addr = 0x88;
[v _reg_addr `uc ~T0 @X0 1 a ]
[e = _reg_addr -> -> 136 `i `uc ]
[v F399 `uc ~T0 @X0 -> 26 `i s ]
[i F399
:U ..
"1440
[; ;bme280.c: 1440:     uint8_t calib_data[26] = { 0 };
-> -> 0 `i `uc
..
]
[v _calib_data `uc ~T0 @X0 -> 26 `i a ]
[e = _calib_data F399 ]
"1443
[; ;bme280.c: 1443:     rslt = bme280_get_regs(reg_addr, calib_data, 26, dev);
[e = _rslt ( _bme280_get_regs (4 , , , _reg_addr &U _calib_data -> -> -> 26 `i `l `ul _dev ]
"1445
[; ;bme280.c: 1445:     if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 114  ]
"1446
[; ;bme280.c: 1446:     {
{
"1450
[; ;bme280.c: 1450:         parse_temp_press_calib_data(calib_data, dev);
[e ( _parse_temp_press_calib_data (2 , -> &U _calib_data `*Cuc _dev ]
"1451
[; ;bme280.c: 1451:         reg_addr = 0xE1;
[e = _reg_addr -> -> 225 `i `uc ]
"1454
[; ;bme280.c: 1454:         rslt = bme280_get_regs(reg_addr, calib_data, 7, dev);
[e = _rslt ( _bme280_get_regs (4 , , , _reg_addr &U _calib_data -> -> -> 7 `i `l `ul _dev ]
"1456
[; ;bme280.c: 1456:         if (rslt == 0)
[e $ ! == -> _rslt `i -> 0 `i 115  ]
"1457
[; ;bme280.c: 1457:         {
{
"1461
[; ;bme280.c: 1461:             parse_humidity_calib_data(calib_data, dev);
[e ( _parse_humidity_calib_data (2 , -> &U _calib_data `*Cuc _dev ]
"1462
[; ;bme280.c: 1462:         }
}
[e :U 115 ]
"1463
[; ;bme280.c: 1463:     }
}
[e :U 114 ]
"1465
[; ;bme280.c: 1465:     return rslt;
[e ) _rslt ]
[e $UE 113  ]
"1466
[; ;bme280.c: 1466: }
[e :UE 113 ]
}
"1472
[; ;bme280.c: 1472: static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
[v _interleave_reg_addr `(v ~T0 @X0 1 sf4`*Cuc`*uc`*Cuc`ul ]
"1473
[; ;bme280.c: 1473: {
{
[e :U _interleave_reg_addr ]
"1472
[; ;bme280.c: 1472: static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint32_t len)
[v _reg_addr `*Cuc ~T0 @X0 1 r1 ]
[v _temp_buff `*uc ~T0 @X0 1 r2 ]
[v _reg_data `*Cuc ~T0 @X0 1 r3 ]
[v _len `ul ~T0 @X0 1 r4 ]
"1473
[; ;bme280.c: 1473: {
[f ]
"1474
[; ;bme280.c: 1474:     uint32_t index;
[v _index `ul ~T0 @X0 1 a ]
"1476
[; ;bme280.c: 1476:     for (index = 1; index < len; index++)
{
[e = _index -> -> -> 1 `i `l `ul ]
[e $U 120  ]
[e :U 117 ]
"1477
[; ;bme280.c: 1477:     {
{
"1478
[; ;bme280.c: 1478:         temp_buff[(index * 2) - 1] = reg_addr[index];
[e = *U + _temp_buff * -> - * _index -> -> -> 2 `i `l `ul -> -> -> 1 `i `l `ul `ux -> -> # *U _temp_buff `ui `ux *U + _reg_addr * -> _index `ux -> -> # *U _reg_addr `ui `ux ]
"1479
[; ;bme280.c: 1479:         temp_buff[index * 2] = reg_data[index];
[e = *U + _temp_buff * -> * _index -> -> -> 2 `i `l `ul `ux -> -> # *U _temp_buff `ui `ux *U + _reg_data * -> _index `ux -> -> # *U _reg_data `ui `ux ]
"1480
[; ;bme280.c: 1480:     }
}
[e ++ _index -> -> -> 1 `i `l `ul ]
[e :U 120 ]
[e $ < _index _len 117  ]
[e :U 118 ]
}
"1481
[; ;bme280.c: 1481: }
[e :UE 116 ]
}
"1487
[; ;bme280.c: 1487: static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
[v _parse_temp_press_calib_data `(v ~T0 @X0 1 sf2`*Cuc`*S5 ]
"1488
[; ;bme280.c: 1488: {
{
[e :U _parse_temp_press_calib_data ]
"1487
[; ;bme280.c: 1487: static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
[v _reg_data `*Cuc ~T0 @X0 1 r1 ]
[v _dev `*S5 ~T0 @X0 1 r2 ]
"1488
[; ;bme280.c: 1488: {
[f ]
"1489
[; ;bme280.c: 1489:     struct bme280_calib_data *calib_data = &dev->calib_data;
[v _calib_data `*S1 ~T0 @X0 1 a ]
[e = _calib_data &U . *U _dev 7 ]
"1491
[; ;bme280.c: 1491:     calib_data->dig_t1 = (((uint16_t)reg_data[1] << 8) | (uint16_t)reg_data[0]);
[e = . *U _calib_data 0 -> | << -> -> *U + _reg_data * -> -> 1 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 0 `i `x -> -> # *U _reg_data `i `x `us `ui `us ]
"1492
[; ;bme280.c: 1492:     calib_data->dig_t2 = (int16_t)(((uint16_t)reg_data[3] << 8) | (uint16_t)reg_data[2]);
[e = . *U _calib_data 1 -> | << -> -> *U + _reg_data * -> -> 3 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 2 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1493
[; ;bme280.c: 1493:     calib_data->dig_t3 = (int16_t)(((uint16_t)reg_data[5] << 8) | (uint16_t)reg_data[4]);
[e = . *U _calib_data 2 -> | << -> -> *U + _reg_data * -> -> 5 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 4 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1494
[; ;bme280.c: 1494:     calib_data->dig_p1 = (((uint16_t)reg_data[7] << 8) | (uint16_t)reg_data[6]);
[e = . *U _calib_data 3 -> | << -> -> *U + _reg_data * -> -> 7 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 6 `i `x -> -> # *U _reg_data `i `x `us `ui `us ]
"1495
[; ;bme280.c: 1495:     calib_data->dig_p2 = (int16_t)(((uint16_t)reg_data[9] << 8) | (uint16_t)reg_data[8]);
[e = . *U _calib_data 4 -> | << -> -> *U + _reg_data * -> -> 9 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 8 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1496
[; ;bme280.c: 1496:     calib_data->dig_p3 = (int16_t)(((uint16_t)reg_data[11] << 8) | (uint16_t)reg_data[10]);
[e = . *U _calib_data 5 -> | << -> -> *U + _reg_data * -> -> 11 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 10 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1497
[; ;bme280.c: 1497:     calib_data->dig_p4 = (int16_t)(((uint16_t)reg_data[13] << 8) | (uint16_t)reg_data[12]);
[e = . *U _calib_data 6 -> | << -> -> *U + _reg_data * -> -> 13 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 12 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1498
[; ;bme280.c: 1498:     calib_data->dig_p5 = (int16_t)(((uint16_t)reg_data[15] << 8) | (uint16_t)reg_data[14]);
[e = . *U _calib_data 7 -> | << -> -> *U + _reg_data * -> -> 15 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 14 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1499
[; ;bme280.c: 1499:     calib_data->dig_p6 = (int16_t)(((uint16_t)reg_data[17] << 8) | (uint16_t)reg_data[16]);
[e = . *U _calib_data 8 -> | << -> -> *U + _reg_data * -> -> 17 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 16 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1500
[; ;bme280.c: 1500:     calib_data->dig_p7 = (int16_t)(((uint16_t)reg_data[19] << 8) | (uint16_t)reg_data[18]);
[e = . *U _calib_data 9 -> | << -> -> *U + _reg_data * -> -> 19 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 18 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1501
[; ;bme280.c: 1501:     calib_data->dig_p8 = (int16_t)(((uint16_t)reg_data[21] << 8) | (uint16_t)reg_data[20]);
[e = . *U _calib_data 10 -> | << -> -> *U + _reg_data * -> -> 21 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 20 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1502
[; ;bme280.c: 1502:     calib_data->dig_p9 = (int16_t)(((uint16_t)reg_data[23] << 8) | (uint16_t)reg_data[22]);
[e = . *U _calib_data 11 -> | << -> -> *U + _reg_data * -> -> 23 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 22 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1503
[; ;bme280.c: 1503:     calib_data->dig_h1 = reg_data[25];
[e = . *U _calib_data 12 *U + _reg_data * -> -> 25 `i `x -> -> # *U _reg_data `i `x ]
"1504
[; ;bme280.c: 1504: }
[e :UE 121 ]
}
"1510
[; ;bme280.c: 1510: static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
[v _parse_humidity_calib_data `(v ~T0 @X0 1 sf2`*Cuc`*S5 ]
"1511
[; ;bme280.c: 1511: {
{
[e :U _parse_humidity_calib_data ]
"1510
[; ;bme280.c: 1510: static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
[v _reg_data `*Cuc ~T0 @X0 1 r1 ]
[v _dev `*S5 ~T0 @X0 1 r2 ]
"1511
[; ;bme280.c: 1511: {
[f ]
"1512
[; ;bme280.c: 1512:     struct bme280_calib_data *calib_data = &dev->calib_data;
[v _calib_data `*S1 ~T0 @X0 1 a ]
[e = _calib_data &U . *U _dev 7 ]
"1513
[; ;bme280.c: 1513:     int16_t dig_h4_lsb;
[v _dig_h4_lsb `s ~T0 @X0 1 a ]
"1514
[; ;bme280.c: 1514:     int16_t dig_h4_msb;
[v _dig_h4_msb `s ~T0 @X0 1 a ]
"1515
[; ;bme280.c: 1515:     int16_t dig_h5_lsb;
[v _dig_h5_lsb `s ~T0 @X0 1 a ]
"1516
[; ;bme280.c: 1516:     int16_t dig_h5_msb;
[v _dig_h5_msb `s ~T0 @X0 1 a ]
"1518
[; ;bme280.c: 1518:     calib_data->dig_h2 = (int16_t)(((uint16_t)reg_data[1] << 8) | (uint16_t)reg_data[0]);
[e = . *U _calib_data 13 -> | << -> -> *U + _reg_data * -> -> 1 `i `x -> -> # *U _reg_data `i `x `us `ui -> 8 `i -> -> *U + _reg_data * -> -> 0 `i `x -> -> # *U _reg_data `i `x `us `ui `s ]
"1519
[; ;bme280.c: 1519:     calib_data->dig_h3 = reg_data[2];
[e = . *U _calib_data 14 *U + _reg_data * -> -> 2 `i `x -> -> # *U _reg_data `i `x ]
"1520
[; ;bme280.c: 1520:     dig_h4_msb = (int16_t)(int8_t)reg_data[3] * 16;
[e = _dig_h4_msb -> * -> -> -> *U + _reg_data * -> -> 3 `i `x -> -> # *U _reg_data `i `x `c `s `i -> 16 `i `s ]
"1521
[; ;bme280.c: 1521:     dig_h4_lsb = (int16_t)(reg_data[4] & 0x0F);
[e = _dig_h4_lsb -> & -> *U + _reg_data * -> -> 4 `i `x -> -> # *U _reg_data `i `x `i -> 15 `i `s ]
"1522
[; ;bme280.c: 1522:     calib_data->dig_h4 = dig_h4_msb | dig_h4_lsb;
[e = . *U _calib_data 15 -> | -> _dig_h4_msb `i -> _dig_h4_lsb `i `s ]
"1523
[; ;bme280.c: 1523:     dig_h5_msb = (int16_t)(int8_t)reg_data[5] * 16;
[e = _dig_h5_msb -> * -> -> -> *U + _reg_data * -> -> 5 `i `x -> -> # *U _reg_data `i `x `c `s `i -> 16 `i `s ]
"1524
[; ;bme280.c: 1524:     dig_h5_lsb = (int16_t)(reg_data[4] >> 4);
[e = _dig_h5_lsb -> >> -> *U + _reg_data * -> -> 4 `i `x -> -> # *U _reg_data `i `x `i -> 4 `i `s ]
"1525
[; ;bme280.c: 1525:     calib_data->dig_h5 = dig_h5_msb | dig_h5_lsb;
[e = . *U _calib_data 16 -> | -> _dig_h5_msb `i -> _dig_h5_lsb `i `s ]
"1526
[; ;bme280.c: 1526:     calib_data->dig_h6 = (int8_t)reg_data[6];
[e = . *U _calib_data 17 -> *U + _reg_data * -> -> 6 `i `x -> -> # *U _reg_data `i `x `c ]
"1527
[; ;bme280.c: 1527: }
[e :UE 122 ]
}
"1533
[; ;bme280.c: 1533: static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
[v _are_settings_changed `(uc ~T0 @X0 1 sf2`uc`uc ]
"1534
[; ;bme280.c: 1534: {
{
[e :U _are_settings_changed ]
"1533
[; ;bme280.c: 1533: static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
[v _sub_settings `uc ~T0 @X0 1 r1 ]
[v _desired_settings `uc ~T0 @X0 1 r2 ]
"1534
[; ;bme280.c: 1534: {
[f ]
"1535
[; ;bme280.c: 1535:     uint8_t settings_changed = 0;
[v _settings_changed `uc ~T0 @X0 1 a ]
[e = _settings_changed -> -> 0 `i `uc ]
"1537
[; ;bme280.c: 1537:     if (sub_settings & desired_settings)
[e $ ! != & -> _sub_settings `i -> _desired_settings `i -> 0 `i 124  ]
"1538
[; ;bme280.c: 1538:     {
{
"1540
[; ;bme280.c: 1540:         settings_changed = 1;
[e = _settings_changed -> -> 1 `i `uc ]
"1541
[; ;bme280.c: 1541:     }
}
[e $U 125  ]
"1542
[; ;bme280.c: 1542:     else
[e :U 124 ]
"1543
[; ;bme280.c: 1543:     {
{
"1545
[; ;bme280.c: 1545:         settings_changed = 0;
[e = _settings_changed -> -> 0 `i `uc ]
"1546
[; ;bme280.c: 1546:     }
}
[e :U 125 ]
"1548
[; ;bme280.c: 1548:     return settings_changed;
[e ) _settings_changed ]
[e $UE 123  ]
"1549
[; ;bme280.c: 1549: }
[e :UE 123 ]
}
"1555
[; ;bme280.c: 1555: static int8_t null_ptr_check(const struct bme280_dev *dev)
[v _null_ptr_check `(c ~T0 @X0 1 sf1`*CS5 ]
"1556
[; ;bme280.c: 1556: {
{
[e :U _null_ptr_check ]
"1555
[; ;bme280.c: 1555: static int8_t null_ptr_check(const struct bme280_dev *dev)
[v _dev `*CS5 ~T0 @X0 1 r1 ]
"1556
[; ;bme280.c: 1556: {
[f ]
"1557
[; ;bme280.c: 1557:     int8_t rslt;
[v _rslt `c ~T0 @X0 1 a ]
"1559
[; ;bme280.c: 1559:     if ((dev == ((void*)0)) || (dev->read == ((void*)0)) || (dev->write == ((void*)0)) || (dev->delay_us == ((void*)0)))
[e $ ! || || || == _dev -> -> -> 0 `i `*v `*CS5 == . *U _dev 4 -> -> -> 0 `i `*v `*F432 == . *U _dev 5 -> -> -> 0 `i `*v `*F443 == . *U _dev 6 -> -> -> 0 `i `*v `*F452 127  ]
"1560
[; ;bme280.c: 1560:     {
{
"1562
[; ;bme280.c: 1562:         rslt = -1;
[e = _rslt -> -U -> 1 `i `c ]
"1563
[; ;bme280.c: 1563:     }
}
[e $U 128  ]
"1564
[; ;bme280.c: 1564:     else
[e :U 127 ]
"1565
[; ;bme280.c: 1565:     {
{
"1567
[; ;bme280.c: 1567:         rslt = 0;
[e = _rslt -> -> 0 `i `c ]
"1568
[; ;bme280.c: 1568:     }
}
[e :U 128 ]
"1570
[; ;bme280.c: 1570:     return rslt;
[e ) _rslt ]
[e $UE 126  ]
"1571
[; ;bme280.c: 1571: }
[e :UE 126 ]
}
